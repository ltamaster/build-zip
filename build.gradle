import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks 'build'

task pluginZip(type: Jar) {
    destinationDir = file("build/libs")
    baseName = project.ext.archivesBaseName
    version = project.version
    extension = 'zip'
    
    println "baseName: ${baseName}"
    println "archiveFilename: ${archiveFilename}"
    println "version:  ${version}"
    
    from ("${project.ext.pluginBaseFolder}"){
        include("*.yaml")
        include("resources/*")
        include("contents/*")
        into(archiveFilename)
    }
   
    manifest {
        attributes 'Rundeck-Plugin-Name': pluginName.toString(),
                   'Rundeck-Plugin-Description': pluginDescription.toString(),
                   'Rundeck-Plugin-Archive': 'true',
                   'Rundeck-Plugin-File-Version': version,
                   'Rundeck-Plugin-Author': sopsCopyright,
                   'Rundeck-Plugin-URL': sopsUrl,
                   'Rundeck-Plugin-Date': buildDateString
    }
}

pluginZip.doFirst {
    def assetsDir = "${project.buildDir}/resources"
    def assetsMap = new Properties()
    ////def assetsManifest = file("${assetsDir}/manifest.properties")
    //assetsManifest.withInputStream(assetsMap.&load)
    def tokens = assetsMap + [
            version    : version,
            date       : new Date().toString(),
            author     : sopsCopyright,
            url        : sopsUrl,
            title      : pluginName,
            description: pluginDescription,
            name       : archivesBaseName.toString(),
    ]
    
    print "en doFirst"
    copy {
        //load asset mapping
        from(assetsDir) {
            into 'resources'
        }
        
        print "en copy"

        //to avoid the icon.png file will be unreadable
        from("${project.projectDir}/resources"){
            include '**/*.png'
            into "resources"
        }
        
        print "${project.projectDir}"

        from("${project.projectDir}") {
            print it
            print "replacing token"
            filter(ReplaceTokens, tokens: tokens)
            exclude 'assets'
            exclude '**/*.png'
        }
        into "${project.buildDir}/zip-contents"
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        mavenZip(MavenPublication) {
            artifact pluginZip
        }
    }
}



defaultTasks 'clean', 'build','pluginZip'

task build(dependsOn: ['pluginZip']) << {
}

task install(dependsOn: ['build','publishToMavenLocal']) << {
}

task clean(type: Delete) {
    delete('build')
}
